#!/usr/bin/perl

# Copyright © 2014 Jakub Wilk <jwilk@jwilk.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

use v5.10;

use strict;
use warnings;

use English qw(-no_match_vars);
use File::Find ();

use IO::Socket::SSL ();
use IO::Socket::SSL::Utils ();
use URI ();

my @tls_schemes = qw(https ldaps);

my %tls_schemes = map { $_ => 1 } @tls_schemes;

my %ca_certs;
my $ca_dir = '/usr/share/ca-certificates';
my $visit = sub {
    my $file = $_;
    lstat($file);
    if (-d _) {
        return;
    }
    my $cert_ptr = IO::Socket::SSL::Utils::PEM_file2cert($file);
    $ca_certs{$cert_ptr} = $File::Find::name;
};
File::Find::find({wanted => $visit}, $ca_dir);

my $rc = 0;
for my $u (@ARGV) {
    my $uri = URI->new($u);
    my $scheme = $uri->scheme;
    if (not exists $tls_schemes{$scheme}) {
        print {*STDERR} "skeptica: $uri: uknown URI scheme: $scheme\n";
        $rc = 1;
        next;
    }
    my $cert_path = undef;
    my $callback = sub {
        my ($ok, undef, undef, undef, $cert_ptr) = @_;
        if (not defined($cert_path)) {
            $cert_path = $ca_certs{$cert_ptr};
            $cert_path //= '';
        }
        return $ok;
    };
    my ($host, $port) = ($uri->host, $uri->port);
    IO::Socket::SSL->new(
        PeerHost => $uri->host,
        PeerPort => $uri->port,
        SSL_ca => [keys %ca_certs],
        SSL_verify_mode => IO::Socket::SSL::SSL_VERIFY_PEER,
        SSL_verifycn_scheme => 'default',
        SSL_verify_callback => $callback,
    ) or do {
        $rc = 1;
        my $error = $IO::Socket::SSL::SSL_ERROR;
        $error =~s /\AIO::Socket::IP configuration failed SSL connect attempt failed with unknown error error/error/;
        print {*STDERR} "skeptica: $host:$port: $error\n";
        next;
    };
    if (not defined($cert_path) or $cert_path eq '') {
        print {*STDERR} "skeptica: $host:$port: unable to determine CA\n";
        $rc = 1;
    }
    print "$uri\t$cert_path\n";
}
exit($rc);

END {
    # catch write errors:
    local $ERRNO = 0;
    close(STDOUT) or die $ERRNO;
    close(STDERR) or die $ERRNO;
}

# vim:ts=4 sw=4 et
