#!/usr/bin/env perl

# Copyright Â© 2014-2021 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

use v5.10;

use strict;
use warnings;

use English qw(-no_match_vars);
use File::Find ();

use IO::Socket::SSL ();
use IO::Socket::SSL::Utils ();
use URI 1.53 ();

my @scheme_blacklist = qw(ssh);
my %scheme_blacklist = map { $_ => 1 } @scheme_blacklist;

my %ca_certs;
my $ca_dir = '/usr/share/ca-certificates';
my $visit = sub {
    my $file = $_;
    lstat($file);
    if (-d _) {
        return;
    }
    my $cert_ptr = IO::Socket::SSL::Utils::PEM_file2cert($file);
    $ca_certs{$cert_ptr} = $File::Find::name;
};
if (not stat "$ca_dir/") {
    print {*STDERR} "skeptica: $ca_dir: $ERRNO\n";
    exit(1);
}
File::Find::find({wanted => $visit}, $ca_dir);

my $rc = 0;
for my $u (@ARGV) {
    my $uri = URI->new($u);
    my $scheme = $uri->scheme;
    if (not defined($scheme) or $scheme =~ m/[.]/) {
        print {*STDERR} "skeptica: $uri: unknown URI scheme\n";
        $rc = 1;
        next;
    }
    my $tls = (
        $uri->secure and
        not exists($scheme_blacklist{$scheme})
    );
    if (not $tls) {
        print {*STDERR} "skeptica: $uri: unknown URI scheme: $scheme\n";
        $rc = 1;
        next;
    }
    my $cert_path = undef;
    my $callback = sub {
        my ($ok, undef, undef, undef, $cert_ptr) = @_;
        $cert_path //= $ca_certs{$cert_ptr};
        $cert_path //= '';
        return $ok;
    };
    my ($host, $port) = ($uri->host, $uri->port);
    IO::Socket::SSL->new(
        PeerHost => $uri->host,
        PeerPort => $uri->port,
        SSL_ca => [keys %ca_certs],
        SSL_verify_mode => IO::Socket::SSL::SSL_VERIFY_PEER,
        SSL_verifycn_scheme => 'default',
        SSL_verify_callback => $callback,
    ) or do {
        my $error = $IO::Socket::SSL::SSL_ERROR;
        my $cruft = 'IO::Socket::IP configuration failed SSL connect attempt failed with unknown error';
        $error =~s /\A\Q$cruft error/error/;
        print {*STDERR} "skeptica: $host:$port: $error\n";
        $rc = 1;
        next;
    };
    if (not $cert_path) {
        print {*STDERR} "skeptica: $host:$port: unable to determine CA\n";
        $rc = 1;
        next;
    }
    print "$uri\t$cert_path\n";
}
exit($rc);

END {
    # catch write errors:
    local $ERRNO = 0;
    close(STDOUT) or die $ERRNO;
    close(STDERR) or die $ERRNO;
}

# vim:ts=4 sts=4 sw=4 et
